// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Web.Models;

#nullable disable

namespace Web.Migrations
{
    [DbContext(typeof(AccelerContext))]
    partial class AccelerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Web.Models.ActivityType", b =>
                {
                    b.Property<long>("IdActivityTypes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_activity_types");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdActivityTypes"));

                    b.Property<string>("NameActivity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name_activity");

                    b.HasKey("IdActivityTypes")
                        .HasName("Activity_types_pkey");

                    b.HasIndex(new[] { "IdActivityTypes" }, "Activity_id_key")
                        .IsUnique();

                    b.ToTable("Activity_types", (string)null);
                });

            modelBuilder.Entity("Web.Models.Company", b =>
                {
                    b.Property<long>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_company");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdCompany"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCompany")
                        .HasName("Company_pkey");

                    b.HasIndex(new[] { "IdCompany" }, "Company_id_key")
                        .IsUnique();

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("Web.Models.Measurement", b =>
                {
                    b.Property<float>("Ax")
                        .HasColumnType("real")
                        .HasColumnName("ax");

                    b.Property<float>("Ay")
                        .HasColumnType("real")
                        .HasColumnName("ay");

                    b.Property<float>("Az")
                        .HasColumnType("real")
                        .HasColumnName("az");

                    b.Property<long?>("FkMeasurementSession")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_measurement_session");

                    b.Property<long>("IdMeasurement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_measurement");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdMeasurement"));

                    b.HasIndex("FkMeasurementSession");

                    b.ToTable("Measurement", (string)null);
                });

            modelBuilder.Entity("Web.Models.Person", b =>
                {
                    b.Property<long>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_person");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPerson"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("lastname");

                    b.HasKey("IdPerson")
                        .HasName("Person_pkey");

                    b.HasIndex(new[] { "IdPerson" }, "Person_id_key")
                        .IsUnique();

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Web.Models.Phone", b =>
                {
                    b.Property<long>("IdPhone")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_phone");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdPhone"));

                    b.Property<long?>("FkPhonePerson")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_phone_person");

                    b.Property<long>("NumberPhone")
                        .HasColumnType("bigint")
                        .HasColumnName("number_phone");

                    b.Property<string>("StatusPhone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("status_phone");

                    b.HasKey("IdPhone")
                        .HasName("Phone_pkey");

                    b.HasIndex("FkPhonePerson");

                    b.HasIndex(new[] { "IdPhone" }, "Phone_id_key")
                        .IsUnique();

                    b.ToTable("Phone", (string)null);
                });

            modelBuilder.Entity("Web.Models.Session", b =>
                {
                    b.Property<long>("IdSession")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id_session");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("IdSession"));

                    b.Property<long?>("FkSessionActivity")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_session_activity");

                    b.Property<long?>("FkSessionPhone")
                        .HasColumnType("bigint")
                        .HasColumnName("fk_session_phone");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_end");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("time_start");

                    b.HasKey("IdSession")
                        .HasName("Session_pkey");

                    b.HasIndex("FkSessionActivity");

                    b.HasIndex("FkSessionPhone");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Web.Models.Measurement", b =>
                {
                    b.HasOne("Web.Models.Session", "FkMeasurementSessionNavigation")
                        .WithMany()
                        .HasForeignKey("FkMeasurementSession")
                        .HasConstraintName("Measurement_fk_measurement_session_fkey");

                    b.Navigation("FkMeasurementSessionNavigation");
                });

            modelBuilder.Entity("Web.Models.Phone", b =>
                {
                    b.HasOne("Web.Models.Person", "FkPhonePersonNavigation")
                        .WithMany("Phones")
                        .HasForeignKey("FkPhonePerson")
                        .HasConstraintName("Phone_fk_phone_person_fkey");

                    b.Navigation("FkPhonePersonNavigation");
                });

            modelBuilder.Entity("Web.Models.Session", b =>
                {
                    b.HasOne("Web.Models.ActivityType", "FkSessionActivityNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("FkSessionActivity")
                        .HasConstraintName("Session_fk_session_activity_fkey");

                    b.HasOne("Web.Models.Phone", "FkSessionPhoneNavigation")
                        .WithMany("Sessions")
                        .HasForeignKey("FkSessionPhone")
                        .HasConstraintName("Session_fk_session_phone_fkey");

                    b.Navigation("FkSessionActivityNavigation");

                    b.Navigation("FkSessionPhoneNavigation");
                });

            modelBuilder.Entity("Web.Models.ActivityType", b =>
                {
                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Web.Models.Person", b =>
                {
                    b.Navigation("Phones");
                });

            modelBuilder.Entity("Web.Models.Phone", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
